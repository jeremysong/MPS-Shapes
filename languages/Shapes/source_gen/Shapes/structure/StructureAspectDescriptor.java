package Shapes.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import java.util.Collection;
import java.util.Arrays;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import jetbrains.mps.smodel.runtime.DataTypeDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder2;
import jetbrains.mps.smodel.adapter.ids.PrimitiveTypeId;

public class StructureAspectDescriptor extends BaseStructureAspectDescriptor {
  /*package*/ final ConceptDescriptor myConceptCanvas = createDescriptorForCanvas();
  /*package*/ final ConceptDescriptor myConceptCircle = createDescriptorForCircle();
  /*package*/ final ConceptDescriptor myConceptColor = createDescriptorForColor();
  /*package*/ final ConceptDescriptor myConceptColorReference = createDescriptorForColorReference();
  /*package*/ final ConceptDescriptor myConceptPoint = createDescriptorForPoint();
  /*package*/ final ConceptDescriptor myConceptPolygon = createDescriptorForPolygon();
  /*package*/ final ConceptDescriptor myConceptRectangle = createDescriptorForRectangle();
  /*package*/ final ConceptDescriptor myConceptShape = createDescriptorForShape();
  /*package*/ final ConceptDescriptor myConceptSquare = createDescriptorForSquare();
  private final LanguageConceptSwitch myIndexSwitch;

  public StructureAspectDescriptor() {
    myIndexSwitch = new LanguageConceptSwitch();
  }

  @Override
  public Collection<ConceptDescriptor> getDescriptors() {
    return Arrays.asList(myConceptCanvas, myConceptCircle, myConceptColor, myConceptColorReference, myConceptPoint, myConceptPolygon, myConceptRectangle, myConceptShape, myConceptSquare);
  }

  @Override
  @Nullable
  public ConceptDescriptor getDescriptor(SConceptId id) {
    switch (myIndexSwitch.index(id)) {
      case LanguageConceptSwitch.Canvas:
        return myConceptCanvas;
      case LanguageConceptSwitch.Circle:
        return myConceptCircle;
      case LanguageConceptSwitch.Color:
        return myConceptColor;
      case LanguageConceptSwitch.ColorReference:
        return myConceptColorReference;
      case LanguageConceptSwitch.Point:
        return myConceptPoint;
      case LanguageConceptSwitch.Polygon:
        return myConceptPolygon;
      case LanguageConceptSwitch.Rectangle:
        return myConceptRectangle;
      case LanguageConceptSwitch.Shape:
        return myConceptShape;
      case LanguageConceptSwitch.Square:
        return myConceptSquare;
      default:
        return null;
    }
  }

  @Override
  public Collection<DataTypeDescriptor> getDataTypeDescriptors() {
    return Arrays.asList();
  }

  /*package*/ int internalIndex(SAbstractConcept c) {
    return myIndexSwitch.index(c);
  }

  private static ConceptDescriptor createDescriptorForCanvas() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Shapes", "Canvas", 0x7143c4151117487cL, 0xb5cff1a234b7a31dL, 0x60782db15492eb2fL);
    b.class_(false, false, true);
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L);
    b.parent(0x4caf0310491e41f5L, 0x8a9b2006b3a94898L, 0x40c1a7cb987d20d5L);
    b.origin("r:b7c40c66-5cc5-4599-908c-b205b9d5239a(Shapes.structure)/6951356264497736495");
    b.version(2);
    b.property("hight", 0xdb2f6813450de46L).type(PrimitiveTypeId.INTEGER).origin("987122303136489030").done();
    b.property("width", 0xdb2f6813450de63L).type(PrimitiveTypeId.INTEGER).origin("987122303136489059").done();
    b.aggregate("shapes", 0x60782db15492eb32L).target(0x7143c4151117487cL, 0xb5cff1a234b7a31dL, 0x60782db15492eb15L).optional(true).ordered(true).multiple(true).origin("6951356264497736498").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForCircle() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Shapes", "Circle", 0x7143c4151117487cL, 0xb5cff1a234b7a31dL, 0x60782db15492eb16L);
    b.class_(false, false, false);
    b.super_("Shapes.structure.Shape", 0x7143c4151117487cL, 0xb5cff1a234b7a31dL, 0x60782db15492eb15L);
    b.origin("r:b7c40c66-5cc5-4599-908c-b205b9d5239a(Shapes.structure)/6951356264497736470");
    b.version(2);
    b.property("x", 0x60782db15492eb17L).type(PrimitiveTypeId.INTEGER).origin("6951356264497736471").done();
    b.property("y", 0x60782db15492eb19L).type(PrimitiveTypeId.INTEGER).origin("6951356264497736473").done();
    b.property("radius", 0x60782db15492eb1cL).type(PrimitiveTypeId.INTEGER).origin("6951356264497736476").done();
    b.alias("circle");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForColor() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Shapes", "Color", 0x7143c4151117487cL, 0xb5cff1a234b7a31dL, 0x60782db154960c83L);
    b.class_(false, false, true);
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L);
    b.origin("r:b7c40c66-5cc5-4599-908c-b205b9d5239a(Shapes.structure)/6951356264497941635");
    b.version(2);
    b.alias("color");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForColorReference() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Shapes", "ColorReference", 0x7143c4151117487cL, 0xb5cff1a234b7a31dL, 0x60782db154974078L);
    b.class_(false, false, false);
    b.origin("r:b7c40c66-5cc5-4599-908c-b205b9d5239a(Shapes.structure)/6951356264498020472");
    b.version(2);
    b.associate("target", 0x60782db154974079L).target(0x7143c4151117487cL, 0xb5cff1a234b7a31dL, 0x60782db154960c83L).optional(false).origin("6951356264498020473").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForPoint() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Shapes", "Point", 0x7143c4151117487cL, 0xb5cff1a234b7a31dL, 0xdb2f68134547bbdL);
    b.class_(false, false, false);
    b.origin("r:b7c40c66-5cc5-4599-908c-b205b9d5239a(Shapes.structure)/987122303136725949");
    b.version(2);
    b.property("x", 0xdb2f68134547da4L).type(PrimitiveTypeId.INTEGER).origin("987122303136726436").done();
    b.property("y", 0xdb2f68134548377L).type(PrimitiveTypeId.INTEGER).origin("987122303136727927").done();
    b.alias("point");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForPolygon() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Shapes", "Polygon", 0x7143c4151117487cL, 0xb5cff1a234b7a31dL, 0xdb2f681345485b1L);
    b.class_(false, false, false);
    b.super_("Shapes.structure.Shape", 0x7143c4151117487cL, 0xb5cff1a234b7a31dL, 0x60782db15492eb15L);
    b.origin("r:b7c40c66-5cc5-4599-908c-b205b9d5239a(Shapes.structure)/987122303136728497");
    b.version(2);
    b.aggregate("points", 0xdb2f6813454877dL).target(0x7143c4151117487cL, 0xb5cff1a234b7a31dL, 0xdb2f68134547bbdL).optional(false).ordered(true).multiple(true).origin("987122303136728957").done();
    b.alias("polygon");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForRectangle() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Shapes", "Rectangle", 0x7143c4151117487cL, 0xb5cff1a234b7a31dL, 0xdb2f6813442c6e9L);
    b.class_(false, false, false);
    b.super_("Shapes.structure.Shape", 0x7143c4151117487cL, 0xb5cff1a234b7a31dL, 0x60782db15492eb15L);
    b.origin("r:b7c40c66-5cc5-4599-908c-b205b9d5239a(Shapes.structure)/987122303135565545");
    b.version(2);
    b.property("upperLeftX", 0xdb2f6813442c705L).type(PrimitiveTypeId.INTEGER).origin("987122303135565573").done();
    b.property("upperLeftY", 0xdb2f6813442c72eL).type(PrimitiveTypeId.INTEGER).origin("987122303135565614").done();
    b.property("hight", 0xdb2f6813442c74cL).type(PrimitiveTypeId.INTEGER).origin("987122303135565644").done();
    b.property("width", 0xdb2f6813442c76bL).type(PrimitiveTypeId.INTEGER).origin("987122303135565675").done();
    b.alias("rectangle");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForShape() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Shapes", "Shape", 0x7143c4151117487cL, 0xb5cff1a234b7a31dL, 0x60782db15492eb15L);
    b.class_(false, true, false);
    b.origin("r:b7c40c66-5cc5-4599-908c-b205b9d5239a(Shapes.structure)/6951356264497736469");
    b.version(2);
    b.aggregate("color", 0x60782db1549744a3L).target(0x7143c4151117487cL, 0xb5cff1a234b7a31dL, 0x60782db154974078L).optional(false).ordered(true).multiple(false).origin("6951356264498021539").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForSquare() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Shapes", "Square", 0x7143c4151117487cL, 0xb5cff1a234b7a31dL, 0x60782db15492eb20L);
    b.class_(false, false, false);
    b.super_("Shapes.structure.Shape", 0x7143c4151117487cL, 0xb5cff1a234b7a31dL, 0x60782db15492eb15L);
    b.origin("r:b7c40c66-5cc5-4599-908c-b205b9d5239a(Shapes.structure)/6951356264497736480");
    b.version(2);
    b.property("upperLeftX", 0x60782db15492eb21L).type(PrimitiveTypeId.INTEGER).origin("6951356264497736481").done();
    b.property("upperLeftY", 0x60782db15492eb23L).type(PrimitiveTypeId.INTEGER).origin("6951356264497736483").done();
    b.property("size", 0x60782db15492eb29L).type(PrimitiveTypeId.INTEGER).origin("6951356264497736489").done();
    b.alias("square");
    return b.create();
  }
}
